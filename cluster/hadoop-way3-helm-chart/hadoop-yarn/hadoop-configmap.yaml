apiVersion: v1
kind: ConfigMap
metadata:
  name: bigdata-hadoop
  labels:
    app: hadoop
data:
  bootstrap.sh: |
    #!/bin/bash

    : ${HADOOP_PREFIX:=/usr/local/hadoop}

    . $HADOOP_PREFIX/etc/hadoop/hadoop-env.sh

    # Directory to find config artifacts
    CONFIG_DIR="/tmp/hadoop-config"

    # create hadoop temp dir
     mkdir -p /root/hadoop/tmp
    
    
    # 复制 yarn 文件到hadoop home，添加了 YARN_NODEMANAGER_JMX_OPTS
     cp ${CONFIG_DIR}/yarn $HADOOP_PREFIX/bin/yarn

    # Copy config files from volume mount

    for f in slaves core-site.xml hdfs-site.xml mapred-site.xml yarn-site.xml httpfs-site.xml yarn-env.sh; do
      if [[ -e ${CONFIG_DIR}/$f ]]; then
        cp ${CONFIG_DIR}/$f $HADOOP_PREFIX/etc/hadoop/$f
      else
        echo "ERROR: Could not find $f in $CONFIG_DIR"
        exit 1
      fi
    done

    # installing libraries if any - (resource urls added comma separated to the ACP system variable)
    cd $HADOOP_PREFIX/share/hadoop/common ; for cp in ${ACP//,/ }; do  echo == $cp; curl -LO $cp ; done; cd -

    if [[ "${HOSTNAME}" =~ "hdfs-nn" ]]; then

      if [ -f /root/hdfs/namenode/current/VERSION ]
      then
        echo "==============The file exist , namenode no need format ==============="
      else
        echo "==============The file doesn't exist , namenode  need format ==============="
        mkdir -p /root/hdfs/namenode
        $HADOOP_PREFIX/bin/hdfs namenode -format -force -nonInteractive
      fi

      $HADOOP_PREFIX/sbin/hadoop-daemon.sh start namenode
    fi

    if [[ "${HOSTNAME}" =~ "hdfs-dn" ]]; then
      mkdir -p /root/hdfs/datanode

      #  wait up to 30 seconds for namenode
      (while [[ $count -lt 15 && -z `curl -sf http://bigdata-hadoop-hdfs-nn:50070` ]]; do ((count=count+1)) ; echo "Waiting for bigdata-hadoop-hdfs-nn" ; sleep 2; done && [[ $count -lt 15 ]])
      [[ $? -ne 0 ]] && echo "Timeout waiting for hdfs-nn, exiting." && exit 1

      $HADOOP_PREFIX/sbin/hadoop-daemon.sh start datanode
    fi

    if [[ "${HOSTNAME}" =~ "yarn-rm" ]]; then
      cp ${CONFIG_DIR}/start-yarn-rm.sh $HADOOP_PREFIX/sbin/
      cd $HADOOP_PREFIX/sbin
      chmod +x start-yarn-rm.sh
      ./start-yarn-rm.sh
    fi
    
     if [[ "${HOSTNAME}" =~ "mr-jobhistory" ]]; then
      cp ${CONFIG_DIR}/start-mr-jobhistory.sh $HADOOP_PREFIX/sbin/
      cd $HADOOP_PREFIX/sbin
      mkdir -p $HADOOP_PREFIX/logs
      chmod +x start-mr-jobhistory.sh
      ./start-mr-jobhistory.sh
    fi

    if [[ "${HOSTNAME}" =~ "yarn-nm" ]]; then
      sed -i '/<\/configuration>/d' $HADOOP_PREFIX/etc/hadoop/yarn-site.xml
      cat >> $HADOOP_PREFIX/etc/hadoop/yarn-site.xml <<- EOM
      <property>
        <name>yarn.nodemanager.resource.memory-mb</name>
        <value>${MY_MEM_LIMIT:-2048}</value>
      </property>

      <property>
        <name>yarn.nodemanager.resource.cpu-vcores</name>
        <value>${MY_CPU_LIMIT:-2}</value>
      </property>
    EOM
      echo '</configuration>' >> $HADOOP_PREFIX/etc/hadoop/yarn-site.xml
      cp ${CONFIG_DIR}/start-yarn-nm.sh $HADOOP_PREFIX/sbin/
      cd $HADOOP_PREFIX/sbin
      chmod +x start-yarn-nm.sh

      #  wait up to 30 seconds for resourcemanager
      (while [[ $count -lt 15 && -z `curl -sf http://bigdata-hadoop-yarn-rm:8088/ws/v1/cluster/info` ]]; do ((count=count+1)) ; echo "Waiting for bigdata-hadoop-yarn-rm" ; sleep 2; done && [[ $count -lt 15 ]])
      [[ $? -ne 0 ]] && echo "Timeout waiting for yarn-rm, exiting." && exit 1

      ./start-yarn-nm.sh
    fi

    if [[ $1 == "-d" ]]; then
      until find ${HADOOP_PREFIX}/logs -mmin -1 | egrep -q '.*'; echo "`date`: Waiting for logs..." ; do sleep 2 ; done
      tail -F ${HADOOP_PREFIX}/logs/* &
      while true; do sleep 1000; done
    fi

    if [[ $1 == "-bash" ]]; then
      /bin/bash
    fi

  core-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
            <name>fs.defaultFS</name>
            <value>jfs://myjfs</value>
        </property>
       <property>
          <name>fs.jfs.impl</name>
          <value>io.juicefs.JuiceFileSystem</value>
      </property>
      <property>
          <name>fs.AbstractFileSystem.jfs.impl</name>
          <value>io.juicefs.JuiceFS</value>
      </property>
      <property>
          <name>juicefs.meta</name>
          <value>mysql://root:bigdata@(10.81.17.8:33066)/juicefs_k8s</value>
      </property>
      <property>
          <name>juicefs.cache-size</name>
          <value>1024</value>
      </property>
      <property>
          <name>juicefs.access-log</name>
          <value>/tmp/juicefs.access.log</value>
      </property>
      <property>
          <name>juicefs.cache-dir</name>
          <value>/tmp/data/juicefs</value>
      </property>
            <property>
              <name>hadoop.tmp.dir</name>
              <value>file:///root/hadoop/tmp</value>
          </property>
        <!--        增加监控推送-->
        <!--     <property>
           <name>juicefs.push-gateway</name>
           <value>prometheus-pushgateway:9091</value>
         </property> 
         -->
  
        </configuration>

  hdfs-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>

      </configuration>

  mapred-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

    <configuration>
      <property>
        <name>mapreduce.framework.name</name>
        <value>yarn</value>
      </property>
      <property>
        <name>mapreduce.jobhistory.address</name>
        <value>bigdata-hadoop-mr-jobhistory-0.bigdata-hadoop-mr-jobhistory.bigdata-dev.svc.cluster.local:10020</value>
      </property>
      <property>
        <name>mapreduce.jobhistory.webapp.address</name>
        <value>bigdata-hadoop-mr-jobhistory-0.bigdata-hadoop-mr-jobhistory.bigdata-dev.svc.cluster.local:19888</value>
      </property>
     <property>
           <name>mapreduce.map.memory.mb</name>
           <value>5120</value>
     </property>
     <property>
           <name>mapreduce.reduce.memory.mb</name>
           <value>5120</value>
     </property>
    </configuration>

  slaves: |
    localhost

  start-yarn-nm.sh: |
    #!/usr/bin/env bash

    # Start all yarn daemons.  Run this on master node.

    echo "starting yarn daemons"

    bin=`dirname "${BASH_SOURCE-$0}"`
    bin=`cd "$bin"; pwd`

    DEFAULT_LIBEXEC_DIR="$bin"/../libexec
    HADOOP_LIBEXEC_DIR=${HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR}
    . $HADOOP_LIBEXEC_DIR/yarn-config.sh

    # start resourceManager
    # "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start resourcemanager
    # start nodeManager
    "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start nodemanager
    # start proxyserver
    #"$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start proxyserver

  start-mr-jobhistory.sh: |
    #!/usr/bin/env bash

    # Start all yarn daemons.  Run this on master node.

    echo "starting mr jobhistory "

    bin=`dirname "${BASH_SOURCE-$0}"`
    bin=`cd "$bin"; pwd`

    DEFAULT_LIBEXEC_DIR="$bin"/../libexec
    HADOOP_LIBEXEC_DIR=${HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR}
    . $HADOOP_LIBEXEC_DIR/yarn-config.sh

    # start resourceManager
    # "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start resourcemanager
    # start nodeManager
    #"$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start nodemanager
    # start proxyserver
    #"$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start proxyserver
    # start mr history
    "$bin"/mr-jobhistory-daemon.sh --config $YARN_CONF_DIR  start historyserver


  start-yarn-rm.sh: |
    #!/usr/bin/env bash

    # Start all yarn daemons.  Run this on master node.

    echo "starting yarn daemons"

    bin=`dirname "${BASH_SOURCE-$0}"`
    bin=`cd "$bin"; pwd`

    DEFAULT_LIBEXEC_DIR="$bin"/../libexec
    HADOOP_LIBEXEC_DIR=${HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR}
    . $HADOOP_LIBEXEC_DIR/yarn-config.sh

    # start resourceManager
    "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start resourcemanager
    # start nodeManager
    # "$bin"/yarn-daemons.sh --config $YARN_CONF_DIR  start nodemanager
    # start proxyserver
    "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start proxyserver

  httpfs-site.xml: |
    <configuration>

    </configuration>
  yarn-env.sh: |
      # User for YARN daemons
      export HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}

      # resolve links - $0 may be a softlink
      export YARN_CONF_DIR="${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}"

      # some Java parameters
      # export JAVA_HOME=/home/y/libexec/jdk1.6.0/
      if [ "$JAVA_HOME" != "" ]; then
        #echo "run java in $JAVA_HOME"
        JAVA_HOME=$JAVA_HOME
      fi
        
      if [ "$JAVA_HOME" = "" ]; then
        echo "Error: JAVA_HOME is not set."
        exit 1
      fi

      JAVA=$JAVA_HOME/bin/java
      JAVA_HEAP_MAX=-Xmx1000m 

      # For setting YARN specific HEAP sizes please use this
      # Parameter and set appropriately
      # YARN_HEAPSIZE=1000

      # check envvars which might override default args
      if [ "$YARN_HEAPSIZE" != "" ]; then
        JAVA_HEAP_MAX="-Xmx""$YARN_HEAPSIZE""m"
      fi

      # Resource Manager specific parameters

      # Specify the max Heapsize for the ResourceManager using a numerical value
      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
      # the value to 1000.
      # This value will be overridden by an Xmx setting specified in either YARN_OPTS
      # and/or YARN_RESOURCEMANAGER_OPTS.
      # If not specified, the default value will be picked from either YARN_HEAPMAX
      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
      #export YARN_RESOURCEMANAGER_HEAPSIZE=1000

      # Specify the max Heapsize for the timeline server using a numerical value
      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
      # the value to 1000.
      # This value will be overridden by an Xmx setting specified in either YARN_OPTS
      # and/or YARN_TIMELINESERVER_OPTS.
      # If not specified, the default value will be picked from either YARN_HEAPMAX
      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
      #export YARN_TIMELINESERVER_HEAPSIZE=1000

      # Specify the JVM options to be used when starting the ResourceManager.
      # These options will be appended to the options specified as YARN_OPTS
      # and therefore may override any similar flags set in YARN_OPTS
      #export YARN_RESOURCEMANAGER_OPTS=

      # Node Manager specific parameters

      # Specify the max Heapsize for the NodeManager using a numerical value
      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
      # the value to 1000.
      # This value will be overridden by an Xmx setting specified in either YARN_OPTS
      # and/or YARN_NODEMANAGER_OPTS.
      # If not specified, the default value will be picked from either YARN_HEAPMAX
      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
      #export YARN_NODEMANAGER_HEAPSIZE=1000

      # Specify the JVM options to be used when starting the NodeManager.
      # These options will be appended to the options specified as YARN_OPTS
      # and therefore may override any similar flags set in YARN_OPTS
      #export YARN_NODEMANAGER_OPTS=

      # so that filenames w/ spaces are handled correctly in loops below
      IFS=


      # default log directory & file
      if [ "$YARN_LOG_DIR" = "" ]; then
        YARN_LOG_DIR="$HADOOP_YARN_HOME/logs"
      fi
      if [ "$YARN_LOGFILE" = "" ]; then
        YARN_LOGFILE='yarn.log'
      fi

      # default policy file for service-level authorization
      if [ "$YARN_POLICYFILE" = "" ]; then
        YARN_POLICYFILE="hadoop-policy.xml"
      fi

      # restore ordinary behaviour
      unset IFS


      YARN_OPTS="$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR"
      YARN_OPTS="$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR"
      YARN_OPTS="$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE"
      YARN_OPTS="$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE"
      YARN_OPTS="$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME"
      YARN_OPTS="$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING"
      YARN_OPTS="$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}"
      YARN_OPTS="$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}"
      if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
        YARN_OPTS="$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
      fi  
      YARN_OPTS="$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE"

      # 添加promethus监控
      export YARN_NODEMANAGER_JMX_OPTS="-Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false   -Dcom.sun.management.jmxremote.port=12345 -javaagent:/usr/local/hadoop/jmx_exporter.jar=9200:/usr/local/hadoop/jmx_config.yml"
      export YARN_RESOURCEMANAGER_JMX_OPTS="-Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false   -Dcom.sun.management.jmxremote.port=12345 -javaagent:/usr/local/hadoop/jmx_exporter.jar=9200:/usr/local/hadoop/jmx_config.yml"




  jmx_config.yml: |
      ---
      startDelaySeconds: 0
      hostPort: localhost:12345
      ssl: false
      lowercaseOutputName: false
      lowercaseOutputLabelNames: false
      
      rules:
        - pattern: '.*'
  yarn: |
    #!/usr/bin/env bash

    # The Hadoop command script
    #
    # Environment Variables
    #
    #   JAVA_HOME        The java implementation to use.  Overrides JAVA_HOME.
    #
    #   YARN_USER_CLASSPATH Additional user CLASSPATH entries.
    #
    #   YARN_USER_CLASSPATH_FIRST  If set to non empty value then the user classpath
    #                              specified in YARN_USER_CLASSPATH will be
    #                              appended at the beginning of YARN's final
    #                              classpath instead of at the end.
    #
    #   YARN_HEAPSIZE  The maximum amount of heap to use, in MB. 
    #                    Default is 1000.
    #
    #   YARN_{COMMAND}_HEAPSIZE overrides YARN_HEAPSIZE for a given command
    #                           eg YARN_NODEMANAGER_HEAPSIZE sets the heap
    #                           size for the NodeManager.  If you set the
    #                           heap size in YARN_{COMMAND}_OPTS or YARN_OPTS
    #                           they take precedence.
    #
    #   YARN_OPTS      Extra Java runtime options.
    #   
    #   YARN_CLIENT_OPTS         when the respective command is run.
    #   YARN_{COMMAND}_OPTS etc  YARN_NODEMANAGER_OPTS applies to NodeManager 
    #                              for e.g.  YARN_CLIENT_OPTS applies to 
    #                              more than one command (fs, dfs, fsck, 
    #                              dfsadmin etc)  
    #
    #   YARN_CONF_DIR  Alternate conf dir. Default is ${HADOOP_YARN_HOME}/conf.
    #
    #   YARN_ROOT_LOGGER The root appender. Default is INFO,console
    #

    bin=`dirname "${BASH_SOURCE-$0}"`
    bin=`cd "$bin"; pwd`

    DEFAULT_LIBEXEC_DIR="$bin"/../libexec

    HADOOP_LIBEXEC_DIR=${HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR}
    . $HADOOP_LIBEXEC_DIR/yarn-config.sh

    function print_usage(){
      echo "Usage: yarn [--config confdir] [COMMAND | CLASSNAME]"
      echo "  CLASSNAME                             run the class named CLASSNAME"
      echo " or"
      echo "  where COMMAND is one of:"
      echo "  resourcemanager -format-state-store   deletes the RMStateStore"
      echo "  resourcemanager                       run the ResourceManager"
      echo "  nodemanager                           run a nodemanager on each slave"
      echo "  timelineserver                        run the timeline server"
      echo "  rmadmin                               admin tools"
      echo "  sharedcachemanager                    run the SharedCacheManager daemon"
      echo "  scmadmin                              SharedCacheManager admin tools"
      echo "  version                               print the version"
      echo "  jar <jar>                             run a jar file"
      echo "  application                           prints application(s)"
      echo "                                        report/kill application"
      echo "  applicationattempt                    prints applicationattempt(s)"
      echo "                                        report"
      echo "  container                             prints container(s) report"
      echo "  node                                  prints node report(s)"
      echo "  queue                                 prints queue information"
      echo "  logs                                  dump container logs"
      echo "  classpath                             prints the class path needed to"
      echo "                                        get the Hadoop jar and the"
      echo "                                        required libraries"
      echo "  cluster                               prints cluster information"
      echo "  daemonlog                             get/set the log level for each"
      echo "                                        daemon"
      echo ""
      echo "Most commands print help when invoked w/o parameters."
    }

    # if no args specified, show usage
    if [ $# = 0 ]; then
      print_usage
      exit 1
    fi

    # get arguments
    COMMAND=$1
    shift

    case $COMMAND in
      # usage flags
      --help|-help|-h)
        print_usage
        exit
        ;;
    esac

    if [ -f "${YARN_CONF_DIR}/yarn-env.sh" ]; then
      . "${YARN_CONF_DIR}/yarn-env.sh"
    fi

    # some Java parameters
    if [ "$JAVA_HOME" != "" ]; then
      #echo "run java in $JAVA_HOME"
      JAVA_HOME=$JAVA_HOME
    fi
      
    if [ "$JAVA_HOME" = "" ]; then
      echo "Error: JAVA_HOME is not set."
      exit 1
    fi

    JAVA=$JAVA_HOME/bin/java
    JAVA_HEAP_MAX=-Xmx1000m 

    # check envvars which might override default args
    if [ "$YARN_HEAPSIZE" != "" ]; then
      #echo "run with heapsize $YARN_HEAPSIZE"
      JAVA_HEAP_MAX="-Xmx""$YARN_HEAPSIZE""m"
      #echo $JAVA_HEAP_MAX
    fi

    # CLASSPATH initially contains $HADOOP_CONF_DIR & $YARN_CONF_DIR
    if [ ! -d "$HADOOP_CONF_DIR" ]; then
      echo No HADOOP_CONF_DIR set. 
      echo Please specify it either in yarn-env.sh or in the environment.
      exit 1
    fi

    CLASSPATH="${HADOOP_CONF_DIR}:${YARN_CONF_DIR}:${CLASSPATH}"

    # for developers, add Hadoop classes to CLASSPATH
    if [ -d "$HADOOP_YARN_HOME/yarn-api/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-api/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/yarn-common/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-common/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/yarn-mapreduce/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-mapreduce/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/yarn-master-worker/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-master-worker/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/yarn-server/yarn-server-nodemanager/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-server/yarn-server-nodemanager/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/yarn-server/yarn-server-common/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-server/yarn-server-common/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/yarn-server/yarn-server-resourcemanager/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-server/yarn-server-resourcemanager/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/yarn-server/yarn-server-applicationhistoryservice/target/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/yarn-server/yarn-server-applicationhistoryservice/target/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/build/test/classes" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/target/test/classes
    fi
    if [ -d "$HADOOP_YARN_HOME/build/tools" ]; then
      CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/build/tools
    fi

    CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/${YARN_DIR}/*
    CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/${YARN_LIB_JARS_DIR}/*

    # Add user defined YARN_USER_CLASSPATH to the class path (if defined)
    if [ -n "$YARN_USER_CLASSPATH" ]; then
      if [ -n "$YARN_USER_CLASSPATH_FIRST" ]; then
        # User requested to add the custom entries at the beginning
        CLASSPATH=${YARN_USER_CLASSPATH}:${CLASSPATH}
      else
        # By default we will just append the extra entries at the end
        CLASSPATH=${CLASSPATH}:${YARN_USER_CLASSPATH}
      fi
    fi

    # so that filenames w/ spaces are handled correctly in loops below
    IFS=

    # default log directory & file
    if [ "$YARN_LOG_DIR" = "" ]; then
      YARN_LOG_DIR="$HADOOP_YARN_HOME/logs"
    fi
    if [ "$YARN_LOGFILE" = "" ]; then
      YARN_LOGFILE='yarn.log'
    fi

    # restore ordinary behaviour
    unset IFS

    # figure out which class to run
    if [ "$COMMAND" = "classpath" ] ; then
      if [ "$#" -gt 0 ]; then
        CLASS=org.apache.hadoop.util.Classpath
      else
        if $cygwin; then
          CLASSPATH=$(cygpath -p -w "$CLASSPATH" 2>/dev/null)
        fi
        echo $CLASSPATH
        exit 0
      fi
    elif [ "$COMMAND" = "rmadmin" ] ; then
      CLASS='org.apache.hadoop.yarn.client.cli.RMAdminCLI'
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "scmadmin" ] ; then
      CLASS='org.apache.hadoop.yarn.client.SCMAdmin'
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "application" ] || 
        [ "$COMMAND" = "applicationattempt" ] || 
        [ "$COMMAND" = "container" ]; then
      CLASS=org.apache.hadoop.yarn.client.cli.ApplicationCLI
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
      set -- $COMMAND $@
    elif [ "$COMMAND" = "node" ] ; then
      CLASS=org.apache.hadoop.yarn.client.cli.NodeCLI
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "queue" ] ; then
      CLASS=org.apache.hadoop.yarn.client.cli.QueueCLI
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "resourcemanager" ] ; then
      CLASSPATH=${CLASSPATH}:$YARN_CONF_DIR/rm-config/log4j.properties
      CLASS='org.apache.hadoop.yarn.server.resourcemanager.ResourceManager'
      YARN_OPTS="$YARN_OPTS $YARN_RESOURCEMANAGER_OPTS $YARN_RESOURCEMANAGER_JMX_OPTS"
      if [ "$YARN_RESOURCEMANAGER_HEAPSIZE" != "" ]; then
        JAVA_HEAP_MAX="-Xmx""$YARN_RESOURCEMANAGER_HEAPSIZE""m"
      fi
    elif [ "$COMMAND" = "historyserver" ] ; then
      echo "DEPRECATED: Use of this command to start the timeline server is deprecated." 1>&2
      echo "Instead use the timelineserver command for it." 1>&2
      CLASSPATH=${CLASSPATH}:$YARN_CONF_DIR/ahs-config/log4j.properties
      CLASS='org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer'
      YARN_OPTS="$YARN_OPTS $YARN_HISTORYSERVER_OPTS"
      if [ "$YARN_HISTORYSERVER_HEAPSIZE" != "" ]; then
        JAVA_HEAP_MAX="-Xmx""$YARN_HISTORYSERVER_HEAPSIZE""m"
      fi
    elif [ "$COMMAND" = "timelineserver" ] ; then
      CLASSPATH=${CLASSPATH}:$YARN_CONF_DIR/timelineserver-config/log4j.properties
      CLASS='org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer'
      YARN_OPTS="$YARN_OPTS $YARN_TIMELINESERVER_OPTS"
      if [ "$YARN_TIMELINESERVER_HEAPSIZE" != "" ]; then
        JAVA_HEAP_MAX="-Xmx""$YARN_TIMELINESERVER_HEAPSIZE""m"
      fi
    elif [ "$COMMAND" = "sharedcachemanager" ] ; then
      CLASSPATH=${CLASSPATH}:$YARN_CONF_DIR/scm-config/log4j.properties
      CLASS='org.apache.hadoop.yarn.server.sharedcachemanager.SharedCacheManager'
      YARN_OPTS="$YARN_OPTS $YARN_SHAREDCACHEMANAGER_OPTS"
      if [ "$YARN_SHAREDCACHEMANAGER_HEAPSIZE" != "" ]; then
        JAVA_HEAP_MAX="-Xmx""$YARN_SHAREDCACHEMANAGER_HEAPSIZE""m"
      fi
    elif [ "$COMMAND" = "nodemanager" ] ; then
      CLASSPATH=${CLASSPATH}:$YARN_CONF_DIR/nm-config/log4j.properties
      CLASS='org.apache.hadoop.yarn.server.nodemanager.NodeManager'
      YARN_OPTS="$YARN_OPTS -server $YARN_NODEMANAGER_OPTS $YARN_NODEMANAGER_JMX_OPTS"
      if [ "$YARN_NODEMANAGER_HEAPSIZE" != "" ]; then
        JAVA_HEAP_MAX="-Xmx""$YARN_NODEMANAGER_HEAPSIZE""m"
      fi
    elif [ "$COMMAND" = "proxyserver" ] ; then
      CLASS='org.apache.hadoop.yarn.server.webproxy.WebAppProxyServer'
      YARN_OPTS="$YARN_OPTS $YARN_PROXYSERVER_OPTS"
      if [ "$YARN_PROXYSERVER_HEAPSIZE" != "" ]; then
        JAVA_HEAP_MAX="-Xmx""$YARN_PROXYSERVER_HEAPSIZE""m"
      fi
    elif [ "$COMMAND" = "version" ] ; then
      CLASS=org.apache.hadoop.util.VersionInfo
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "jar" ] ; then
      CLASS=org.apache.hadoop.util.RunJar
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "logs" ] ; then
      CLASS=org.apache.hadoop.yarn.client.cli.LogsCLI
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "daemonlog" ] ; then
      CLASS=org.apache.hadoop.log.LogLevel
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    elif [ "$COMMAND" = "cluster" ] ; then
      CLASS=org.apache.hadoop.yarn.client.cli.ClusterCLI
      YARN_OPTS="$YARN_OPTS $YARN_CLIENT_OPTS"
    else
      CLASS=$COMMAND
    fi

    # cygwin path translation
    if $cygwin; then
      CLASSPATH=$(cygpath -p -w "$CLASSPATH" 2>/dev/null)
      HADOOP_LOG_DIR=$(cygpath -w "$HADOOP_LOG_DIR" 2>/dev/null)
      HADOOP_PREFIX=$(cygpath -w "$HADOOP_PREFIX" 2>/dev/null)
      HADOOP_CONF_DIR=$(cygpath -w "$HADOOP_CONF_DIR" 2>/dev/null)
      HADOOP_COMMON_HOME=$(cygpath -w "$HADOOP_COMMON_HOME" 2>/dev/null)
      HADOOP_HDFS_HOME=$(cygpath -w "$HADOOP_HDFS_HOME" 2>/dev/null)
      HADOOP_YARN_HOME=$(cygpath -w "$HADOOP_YARN_HOME" 2>/dev/null)
      HADOOP_MAPRED_HOME=$(cygpath -w "$HADOOP_MAPRED_HOME" 2>/dev/null)
      YARN_LOG_DIR=$(cygpath -w "$YARN_LOG_DIR" 2>/dev/null)
    fi

    YARN_OPTS="$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR"
    YARN_OPTS="$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR"
    YARN_OPTS="$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE"
    YARN_OPTS="$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE"
    YARN_OPTS="$YARN_OPTS -Dyarn.home.dir=$HADOOP_YARN_HOME"

    if $cygwin; then
      HADOOP_HOME=$(cygpath -w "$HADOOP_PREFIX" 2>/dev/null)
      YARN_OPTS="$YARN_OPTS -Dhadoop.home.dir=$HADOOP_HOME"
      export HADOOP_HOME
    else
      YARN_OPTS="$YARN_OPTS -Dhadoop.home.dir=$HADOOP_PREFIX"
    fi

    YARN_OPTS="$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-${HADOOP_LOGLEVEL},console}"
    YARN_OPTS="$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-${HADOOP_LOGLEVEL},console}"
    if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
      if $cygwin; then
        JAVA_LIBRARY_PATH=$(cygpath -w "$JAVA_LIBRARY_PATH" 2>/dev/null)
      fi
      YARN_OPTS="$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
    fi  

    exec "$JAVA" -Dproc_$COMMAND $JAVA_HEAP_MAX $YARN_OPTS -classpath "$CLASSPATH" $CLASS "$@"

  yarn-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

    <configuration>
      <property>
        <name>yarn.resourcemanager.hostname</name>
        <value>bigdata-hadoop-yarn-rm</value>
      </property>

      <!-- Bind to all interfaces -->
      <property>
        <name>yarn.resourcemanager.bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <property>
        <name>yarn.nodemanager.bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <property>
        <name>yarn.timeline-service.bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <!-- /Bind to all interfaces -->

      <property>
        <name>yarn.nodemanager.vmem-check-enabled</name>
        <value>false</value>
      </property>

      <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
      </property>

      <property>
        <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
        <value>org.apache.hadoop.mapred.ShuffleHandler</value>
      </property>

      <property>
        <description>List of directories to store localized files in.</description>
        <name>yarn.nodemanager.local-dirs</name>
        <value>/var/lib/hadoop-yarn/cache/${user.name}/nm-local-dir</value>
      </property>

      <property>
        <description>Where to store container logs.</description>
        <name>yarn.nodemanager.log-dirs</name>
        <value>/var/log/hadoop-yarn/containers</value>
      </property>

      <property>
        <description>Where to aggregate logs to.</description>
        <name>yarn.nodemanager.remote-app-log-dir</name>
        <value>/var/log/hadoop-yarn/apps</value>
      </property>
        
        <!--指定yarn.log.server.url所在节点，不开启的话，已完成的任务无法正常查看日志-->
        <property>
        <name>yarn.log.server.url</name>
        <value>http://bigdata-hadoop-mr-jobhistory-0.bigdata-hadoop-mr-jobhistory.bigdata-local.svc.cluster.local:19888/jobhistory/logs</value>
        </property>

      <property>
        <name>yarn.application.classpath</name>
        <value>
          /usr/local/hadoop/etc/hadoop,
          /usr/local/hadoop/share/hadoop/common/*,
          /usr/local/hadoop/share/hadoop/common/lib/*,
          /usr/local/hadoop/share/hadoop/hdfs/*,
          /usr/local/hadoop/share/hadoop/hdfs/lib/*,
          /usr/local/hadoop/share/hadoop/mapreduce/*,
          /usr/local/hadoop/share/hadoop/mapreduce/lib/*,
          /usr/local/hadoop/share/hadoop/yarn/*,
          /usr/local/hadoop/share/hadoop/yarn/lib/*
        </value>
      </property>
    </configuration>
